#!/bin/bash

# set -x # Turn this on to debug

function generateREADME {
    echo "# Hackathon Quickstart

Quickly setup your hackathon environment and starting coding in hour 0!

This project is automatically generated by the script \`generate-project.sh\`.

Tech Stack:

- Backend: Kinetics framework from Developer Sam in Kotlin.
- Frontend: Angular & Angular Material." > ./README.md
}

function generateGitIgnore {
    echo "# Exclude Build Files
**/out/*
**/build/*
**/.gradle/*
**/libs/*
**/dist/*
*.class

# Exclude node_modules
**/node_modules

# Lock
**/package-lock.json

# Exclude IDEA files
**/.idea/*
*.iml

# Exclude System Files
.DS_Store
" > .gitignore
    echo "# Auto detect text files and perform LF normalization
* text=auto" > .gitattributes
}

function generateBackendGradleBuildFile {
    echo "// Auto Generated

/*
 * --------------------------------------------------------------------------------
 * Part 0: General Info Declaration
 * --------------------------------------------------------------------------------
 */

plugins {
    // 3rd-parties
    id 'org.jetbrains.kotlin.jvm' version '1.2.71'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

group = 'com.developersam'
version = '0.0.1'

/*
 * --------------------------------------------------------------------------------
 * Part 1: Common Declaration for all Projects
 * --------------------------------------------------------------------------------
 */

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'kotlin'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://jitpack.io'
        }
    }

    configurations {
        // Suppress Old Guava
        all*.exclude group: 'com.google.guava', module:'guava-jdk5'
    }

    dependencies {
        // Kotlin
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        // Test
        testImplementation 'junit:junit:4.12'
        // Kinetics
        api 'com.github.SamChou19815:kinetics:0.4.1'
        // Cornell API Client Library
        api 'com.github.SamChou19815:cornell-api-libs:0.2.0'
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs = ['-Xjvm-default=enable']
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs = ['-Xjvm-default=enable']
        }
    }
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    shadowJar {
        classifier = null
    }
}

/*
 * --------------------------------------------------------------------------------
 * Part 2: Dependencies for Main
 * --------------------------------------------------------------------------------
 */

dependencies {
    // Spark
    implementation 'com.sparkjava:spark-core:2.8.0'
    implementation 'com.sparkjava:spark-kotlin:1.0.0-alpha'
    // Add your dependencies here
}

/*
 * --------------------------------------------------------------------------------
 * Part 3: Config for Building JVM Project
 * --------------------------------------------------------------------------------
 */

shadowJar {
    baseName = 'website'
    version = 0.1
    manifest {
        attributes 'Main-Class': 'TODO' // TODO specify your main class here
    }
    zip64 true
    artifacts {
        shadow(tasks.shadowJar.archivePath) {
            builtBy shadowJar
        }
    }
}

test {
    testLogging {
        showStandardStreams = true
        events = ['passed', 'skipped', 'failed']
    }
}

project.tasks.assemble.dependsOn(shadowJar)

/*
 * --------------------------------------------------------------------------------
 * Part 4: Tasks to Build and Deploy Other Parts
 * --------------------------------------------------------------------------------
 */

task updateDatastoreIndices {
    String indexFile = '~/.config/gcloud/emulators/datastore/WEB-INF/index.yaml'
    doLast {
        exec {
            commandLine 'sh', '-c', "gcloud datastore create-indexes $indexFile"
        }
    }
}" > build.gradle
}

function generateBackendProject {
    mkdir ./backend
    cd ./backend
    # Create README
    echo '# Hackathon Project Backend

`TODO`
' > README.md
    # Gradle Init
    gradle init
    generateBackendGradleBuildFile
    # Datastore Script Init
    echo '#!/usr/bin/env bash
gcloud beta emulators datastore start --host-port=127.0.0.1:8081 --consistency=0.5
' > local-datastore.sh
    # Setup file structure
    mkdir ./src
    cd ./src
    mkdir ./main
    cd ./main
    mkdir ./java
    mkdir ./kotlin
    mkdir ./resources
    cd ../../../
}

function generateToolingProject {
    mkdir ./tooling
    cd ./tooling
    # Create README
    echo '# Hackathon Project Tooling

`TODO`
' > README.md
    # Setup for Python
    mkdir ./python
    cd ./python
    echo 'print("Hello World")' > test.py
    cd ../
    # Setup for JVM
    mkdir ./jvm
    cd ./jvm
    # Gradle Init
    gradle init
    generateBackendGradleBuildFile
    mkdir ./src
    cd ./src
    mkdir ./main
    cd ./main
    mkdir ./java
    mkdir ./kotlin
    mkdir ./resources
    cd ../../../../
}

function generateFrontendProject {
    npm install -g @angular/cli
    ng new frontend
    cd ./frontend
    ng add @angular/material
    npm install firebase @angular/fire --save
    echo "Please follow instructions on Angular Material to finish setup!"
    cd ../
}

generateREADME
generateGitIgnore
generateBackendProject
generateToolingProject
generateFrontendProject
